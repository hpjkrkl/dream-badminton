// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String?   @unique
  hashedPassword  String?
  name            String?
  avatar          String?
  country         String?
  isAdmin         Boolean   @default(false)
  credits         Int       @default(100)
  experiencePoints Int      @default(0)
  subscriptionTier String   @default("FREE") // FREE, PREMIUM, VIP
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  fantasyTeams    FantasyTeam[]
  userLeagues     UserLeague[]
  notifications   Notification[]
  sessions        Session[]
  accounts        Account[]
  
  @@index([email])
  @@index([username])
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Player Database
model Player {
  id              String    @id @default(cuid())
  bwfId           String    @unique
  firstName       String
  lastName        String
  fullName        String
  country         String
  countryCode     String
  category        PlayerCategory
  gender          Gender
  profileUrl      String?
  imageUrl        String?
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  rankings        Ranking[]
  stats           PlayerStats[]
  fantasySelections TeamPlayer[]
  matchesAsPlayer1 Match[]   @relation("Player1Matches")
  matchesAsPlayer2 Match[]   @relation("Player2Matches")
  
  @@index([bwfId])
  @@index([category])
  @@index([fullName])
}

enum PlayerCategory {
  MS  // Men's Singles
  WS  // Women's Singles
  MD  // Men's Doubles
  WD  // Women's Doubles
  XD  // Mixed Doubles
}

enum Gender {
  MALE
  FEMALE
}

// Player Rankings (Historical)
model Ranking {
  id               String    @id @default(cuid())
  playerId         String
  rank             Int
  previousRank     Int?
  rankChange       Int       @default(0)
  bwfPoints        Int
  tournamentsPlayed Int
  fantasyPrice     Float
  recordedDate     DateTime  @default(now())
  
  player           Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@index([playerId])
  @@index([recordedDate])
  @@unique([playerId, recordedDate])
}

// Player Statistics
model PlayerStats {
  id              String    @id @default(cuid())
  playerId        String
  matchesPlayed   Int       @default(0)
  matchesWon      Int       @default(0)
  winRate         Float     @default(0)
  fantasyPoints   Int       @default(0)
  formRating      Float     @default(5.0) // 1-10 scale
  recentForm      Json?     // Array of recent match results
  
  lastUpdated     DateTime  @updatedAt
  
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@unique([playerId])
  @@index([playerId])
}

// Fantasy Teams
model FantasyTeam {
  id              String    @id @default(cuid())
  userId          String
  name            String
  budgetUsed      Float
  budgetRemaining Float
  captainId       String?
  viceCaptainId   String?
  formationLocked Boolean   @default(false)
  totalPoints     Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  players         TeamPlayer[]
  userLeagues     UserLeague[]
  
  @@index([userId])
}

// Team Players (Junction Table)
model TeamPlayer {
  id              String    @id @default(cuid())
  teamId          String
  playerId        String
  isCaptain       Boolean   @default(false)
  isViceCaptain   Boolean   @default(false)
  purchasePrice   Float
  
  team            FantasyTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player          Player    @relation(fields: [playerId], references: [id])
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
}

// Tournaments
model Tournament {
  id              String    @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  status          TournamentStatus @default(UPCOMING)
  prizePool       Float?
  entryFee        Float?
  maxParticipants Int?
  bwfTournamentId String?   @unique
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  matches         Match[]
  leagues         League[]
  
  @@index([status])
  @@index([startDate])
}

enum TournamentStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

// Matches
model Match {
  id              String    @id @default(cuid())
  tournamentId    String?
  player1Id       String
  player2Id       String
  scheduledTime   DateTime
  status          MatchStatus @default(SCHEDULED)
  result          Json?     // Detailed match result
  player1Score    Int?
  player2Score    Int?
  winnerId        String?
  fantasyPointsAwarded Boolean @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  player1         Player    @relation("Player1Matches", fields: [player1Id], references: [id])
  player2         Player    @relation("Player2Matches", fields: [player2Id], references: [id])
  
  @@index([tournamentId])
  @@index([scheduledTime])
  @@index([status])
}

enum MatchStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
  POSTPONED
}

// Leagues
model League {
  id              String    @id @default(cuid())
  name            String
  type            LeagueType
  entryFee        Float?
  maxParticipants Int?
  startDate       DateTime
  endDate         DateTime
  prizeDistribution Json?
  isPrivate       Boolean   @default(false)
  inviteCode      String?   @unique
  tournamentId    String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  participants    UserLeague[]
  
  @@index([type])
  @@index([inviteCode])
}

enum LeagueType {
  PUBLIC
  PRIVATE
  HEAD_TO_HEAD
  TOURNAMENT
  PRACTICE
}

// User Leagues (Junction Table)
model UserLeague {
  id              String    @id @default(cuid())
  userId          String
  leagueId        String
  fantasyTeamId   String
  currentRank     Int?
  totalPoints     Int       @default(0)
  
  joinedAt        DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  fantasyTeam     FantasyTeam @relation(fields: [fantasyTeamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, leagueId])
  @@index([userId])
  @@index([leagueId])
}

// Notifications
model Notification {
  id              String    @id @default(cuid())
  userId          String
  title           String
  message         String
  type            NotificationType
  isRead          Boolean   @default(false)
  data            Json?     // Additional data for the notification
  
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
}

enum NotificationType {
  MATCH_START
  MATCH_END
  PLAYER_PERFORMANCE
  LEAGUE_UPDATE
  FRIEND_CHALLENGE
  TOURNAMENT_REMINDER
  SYSTEM
}